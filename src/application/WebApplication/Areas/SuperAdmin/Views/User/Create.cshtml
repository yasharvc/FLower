@{
	Layout = null;
}
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery antiforgery
@{
	var token = antiforgery.GetAndStoreTokens(Context).RequestToken;
}
<div id="user-create@(Model)">
	<form v-on:submit.prevent="save"
		  v-on:reset.prevent="onReset"
		  class="q-pa-md q-gutter-sm">
		<q-card class="my-card">
			<q-card-section>
				<div class="text-h6">New user information</div>
			</q-card-section>
			<q-card-section class="q-pt-none">
				<q-input v-model="username"
						 ref="username"
						 outlined
						 label="User name:"
						 :rules="[ isStringEmpty ]"
						 :error-message="error"
						 :error="!isValid"
						 hint=""></q-input>
				<q-input v-model="password"
						 ref="password"
						 outlined label="Password:"
						 :type="isPwd ? 'password' : 'text'"
						 :rules="[ isStringEmpty ]"
						 hint="">
					<template v-slot:append>
						<q-icon :name="isPwd ? 'visibility_off' : 'visibility'"
								class="cursor-pointer"
								@@click="isPwd = !isPwd"></q-icon>
					</template>
				</q-input>
			</q-card-section>
			<q-card-section class="q-pt-none">
				<q-btn push type="submit" color="primary" label="Save">
					<q-icon name="save" />
				</q-btn>
			</q-card-section>
		</q-card>
	</form>
</div>
<script>
	var createUserApp = new Vue({
		el: "#user-create@(Model)",
		data: function () {
			return {
				password: "",
				username: "",
				isPwd: true,
				formHasError: false,
				isValid: true,
				error:""
			};
		},
		methods: {
			save: function () {
				this.resetErrors();
				topmenu.showLoading();
				this.$refs.username.validate()
				this.$refs.password.validate()

				if (this.$refs.username.hasError || this.$refs.password.hasError) {
					this.formHasError = true;
					topmenu.hideLoading();
				}
				else {
					send = {
						username: createUserApp.username,
						password: createUserApp.password
					};
					postByToken('/SuperAdmin/User/Create', '@token', send, function (resp) {
						if (resp.result) {
							topmenu.showSuccessToast(SUCCESSFULLY_CREATED);
							createUserApp.clearForm();
							createUserApp.resetErrors();
							topmenu.hideLoading();
						}
						else {
							resp.errors.forEach(function (error) {
								topmenu.showErrorToast(translateErrorCode(error));
							});
							createUserApp.error = FAILURE_IN_CREATING;
							createUserApp.isValid = false;
							topmenu.hideLoading();
							setTimeout(function () {
								createUserApp.resetErrors();
							}, 2000);
						}
					});
				}
			},
			clearForm: function () {
				this.username = '';
				this.password = '';
			},
			resetErrors: function () {
				createUserApp.error = "";
				createUserApp.isValid = true;
				this.$refs.username.resetValidation();
				this.$refs.password.resetValidation();
			}
		}
	});
	topmenu.addTabVariables('@Model', [createUserApp]);
</script>