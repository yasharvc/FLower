@model Microsoft.AspNetCore.Authentication.AuthenticationProperties
@{
	ViewData["Title"] = "Home Page";
}
<div id="topmenu">
	<template>
		<q-layout view="hHh LpR fFf">

			<q-header reveal elevated class="bg-primary text-white" height-hint="98">
				<q-toolbar>
					<q-btn dense flat round icon="menu" @@click="left = !left"></q-btn>

					<q-toolbar-title>
						<q-avatar>
							<img src="https://cdn.quasar.dev/logo/svg/quasar-logo.svg">
						</q-avatar>
						Flower
					</q-toolbar-title>
				</q-toolbar>

				<q-tabs inline-label
        :breakpoint="0"
        align="justify">
					<q-tab v-for="(t,index) in tabs" :label="t.title" @@click="changeTab(t.tabIndex)">
							<q-icon name="close" @@click="closeTab(index)"
									class="cursor-pointer"></q-icon>
					</q-tab>
				</q-tabs>
			</q-header>

			<q-drawer show-if-above v-model="left" side="left" behavior="desktop" bordered>
				<q-scroll-area class="fit" style="height: calc(100% - 150px); margin-top: 150px; border-right: 1px solid #ddd">
					<q-list v-for="(menuItem, index) in menuList" :key="index">

						<q-item clickable :active="menuItem.label === 'Outbox'" @@click="menuClick(menuItem.id)" v-ripple>
							<q-item-section avatar>
								<q-icon :name="menuItem.icon" />
							</q-item-section>
							<q-item-section>
								{{ menuItem.label }}
							</q-item-section>
						</q-item>

						<q-separator v-if="menuItem.separator" />

					</q-list>
				</q-scroll-area>
				<q-img class="absolute-top" src="https://cdn.quasar.dev/img/material.png" style="height: 150px">
					<div class="absolute-bottom bg-transparent">
						<q-avatar size="56px" class="q-mb-sm">
							<img src="https://cdn.quasar.dev/img/boy-avatar.png">
						</q-avatar>
						<div class="text-weight-bold">Razvan Stoenescu</div>
						<div>@@rstoenescu</div>
					</div>
				</q-img>
			</q-drawer>

			<q-page-container>
				<div class="q-pa-md q-gutter-sm" id="pages">
				</div>
			</q-page-container>
		</q-layout>
	</template>
	<template>
		<div class="q-pa-md q-gutter-sm">
			<q-dialog v-model="simpleSuccessDialog.show" persistent transition-show="scale" transition-hide="scale">
				<q-card class="bg-teal text-white" style="width: 300px">
					<q-card-section>
						<div class="text-h6">{{simpleSuccessDialog.title}}</div>
					</q-card-section>

					<q-card-section class="q-pt-none">
						{{simpleSuccessDialog.msg}}
					</q-card-section>

					<q-card-actions align="right" class="bg-white text-teal">
						<q-btn flat label="OK" v-close-popup />
					</q-card-actions>
				</q-card>
			</q-dialog>
			<q-dialog v-model="simpleDangerDialog.show" persistent transition-show="scale" transition-hide="scale">
				<q-card class="bg-red text-white" style="width: 300px">
					<q-card-section>
						<div class="text-h6">{{simpleDangerDialog.title}}</div>
					</q-card-section>

					<q-card-section class="q-pt-none">
						{{simpleDangerDialog.msg}}
					</q-card-section>

					<q-card-actions align="right" class="bg-white text-teal">
						<q-btn flat label="OK" v-close-popup />
					</q-card-actions>
				</q-card>
			</q-dialog>
		</div>
	</template>

	<q-inner-loading :showing="loadingDiv.show">
		<q-spinner-gears size="50px" color="primary" />
		<label>{{loadingDiv.msg}}</label>
	</q-inner-loading>
</div>
<script>
	function uuidv4() {
		return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
			var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
			return v.toString(16);
		});
	}
	const tabs = [];
	var topmenu = new Vue({
		el: '#topmenu',
		data: function () {
			return {
				left: false,
				menuList:[],
				tab: 0,
				tabs,
				simpleSuccessDialog: {
					show: false,
					title: "",
					msg: ""
				},
				simpleDangerDialog: {
					show: false,
					title: "",
					msg: ""
				},
				loadingDiv: {
					show: false,
					msg: 'Please wait...'
				}
			};
		},
		created: function () {
			this.showLoading();
			this.$q.addressbarColor.set('#a2e3fa');
			axios.get("/Pages/Menu")
				.then(function (response) {
					topmenu.menuList = response.data;
					topmenu.hideLoading();
				});
		},
		methods: {
			changeTab: function (index) {
				this.tab = parseInt(index);
				console.log(index);
			},
			isTab: function (index) {
				return this.tab == index;
			},
			addTabVariables: function (tabUID, variables) {
				var tab = this.tabs.find(function (tab) { return tab.id == tabUID; });
				if (tab)
					tab.vars = variables;
			}
			,
			menuClick: function (id) {
				id = parseInt(id);
				var x = this.tabs.find(function (tab) { return tab.tabIndex == id; });
				if (x) {
					//Switch to that tab
					this.showSimpleDanger("Tab manager", "Tab is open");
					return;
				}
				var uid = uuidv4();
				this.tabs.push({
					tabIndex: id,
					title: topmenu.menuList[id - 1].label,
					id: uid
				});
				var pages = document.getElementById('pages');
				topmenu.showLoading();
				readHTML(topmenu.menuList[id - 1].link + '?index=' + uid, function (d, content) {
					var scripts = getScripts(content);
					pages.appendChild(makePage(content, uid));
					var allscripts = "";
					scripts.forEach(m => {
						allscripts += "\r\n//----------------\r\n" + m;
						eval(m);
					});
					topmenu.hideLoading();
				});
			},
			showSimpleSuccess: function (title, msg) {
				this.simpleSuccessDialog.title = title;
				this.simpleSuccessDialog.msg = msg;
				this.simpleSuccessDialog.show = true;
			},
			showSimpleDanger: function (title, msg) {
				this.simpleDangerDialog.title = title;
				this.simpleDangerDialog.msg = msg;
				this.simpleDangerDialog.show = true;
			},
			showLoading: function (msg) {
				this.loadingDiv.show = true;
				this.loadingDiv.msg = msg || 'Please wait...';
			},
			showErrorToast: function (msg) {
				this.$q.notify({
					color: 'negative',
					message: msg
				})
			},
			showSuccessToast: function (msg) {
				this.$q.notify({
					icon:'done',
					color: 'positive',
					message: msg
				})
			},
			hideLoading: function () {
				this.loadingDiv.show = false;
				this.loadingDiv.msg = '';
			},
			closeTab: function (index) {
				if (index < 0 || index > this.tabs.length)
					return;
				var tab = this.tabs[index];
				tab.vars.forEach(function (d) { d = null; });
				var doc = document.getElementById(tab.id);
				doc.remove();
				this.tabs.splice(index, 1);
			}
		}
	});
	function getScripts(tes) {
		var res = [];
		var start = 0;
		var end = 0;

		while (true) {
			start = tes.indexOf('<' + 'script>', end);
			if (start == -1)
				return res;
			start += 'lscriptl'.length
			end = tes.indexOf('</' + 'script>', start);
			if (end == -1)
				return res;
			res.push(tes.substring(start, end));
		}
	}

	function makePage(innerHTML,id) {
		var el = document.createElement('gcse:search');
		el.id = id;
		el.setAttribute("v-pre", "");
		el.innerHTML = innerHTML;
		return el;
	}
</script>

@section Scripts{
	@*<script>
		Quasar.lang.set(Quasar.lang.fa)
	</script>*@
}