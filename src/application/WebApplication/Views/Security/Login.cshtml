@{
	Layout = null;
}
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery antiforgery
@{
	var token = antiforgery.GetAndStoreTokens(Context).RequestToken;
}
<div id="login-app@(Model)">
	<form v-on:submit.prevent="login"
		  v-on:reset.prevent="onReset"
		  class="q-pa-md q-gutter-sm">

		<q-card @@submit.prevent.stop="login" class="my-card">
			<q-card-section>
				<div class="text-h6">Login information</div>
				<div class="text-subtitle2">by Flower Inc</div>
			</q-card-section>

			<q-card-section class="q-pt-none">
				<q-input v-model="username"
						 ref="username"
						 outlined
						 label="User name:"
						 :rules="[ isStringEmpty ]"
						 :error-message="error"
						 :error="!isValid"
						 hint=""></q-input>
				<q-input v-model="password"
						 ref="password"
						 outlined label="Password:"
						 :type="isPwd ? 'password' : 'text'"
						 :rules="[ isStringEmpty ]"
						 hint="">
					<template v-slot:append>
						<q-icon :name="isPwd ? 'visibility_off' : 'visibility'"
								class="cursor-pointer"
								@@click="isPwd = !isPwd"></q-icon>
					</template>
				</q-input>
			</q-card-section>
			<q-card-section class="q-pt-none">
				<q-btn push type="submit" color="primary" label="Login">
					<q-icon name="lock_open" />
				</q-btn>
			</q-card-section>
		</q-card>

	</form>
</div>
<script>
	var loginApp = new Vue({
		el: "#login-app@(Model)",
		data: function () {
			return {
				password: "",
				isPwd: true,
				username: "",
				formHasError: false,
				isValid: true,
				error:""
			};
		},
		methods: {
			login: function () {
				topmenu.showLoading();
				this.$refs.username.validate()
				this.$refs.password.validate()

				if (this.$refs.username.hasError || this.$refs.password.hasError) {
					this.formHasError = true;
					topmenu.hideLoading();
				}
				else {
					send = {
						username: loginApp.username,
						password: loginApp.password,
						__RequestVerificationToken: '@token'
					};
					$.ajax({
						type: "POST",
						url: '/Security/Login',
						data: send,
						success: function (resp) {
							if (resp.result) {
								topmenu.showSuccessToast(SUCCESSFULLY_LOGEDIN);
								window.location = "/";
							}
							else {
								topmenu.showErrorToast(LOGIN_FAILED);
								loginApp.error = LOGIN_FAILED;
								loginApp.isValid = false;
								topmenu.hideLoading();
							}
						}
					});
				}
			},
			onReset: function () {
				this.username = null
				this.password = null

				this.$refs.username.resetValidation()
				this.$refs.password.resetValidation()
			}
		}
	});
	topmenu.addTabVariables('@Model', [loginApp]);
</script>